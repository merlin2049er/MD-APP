<% if user_signed_in? %>

<div class="table-responsive">
<!--
<div class="panel panel-default">
  -->

  <!-- Default panel contents -->

  <div class="panel-heading">Shopping cart:  <% if @carts.empty?  %>
      Nothing here...
    <% else %>
      <%= @carts.count %> items...
    <% end %>

    <div class="pull-right"><font size="1">If a campaign is successful, you will be emailed a reminder to pay.</font>
    </div>

  </div>
  <div class="panel-body">


    <table class="table">
      <thead>
      <tr>
        <!-- <th colspan="3"></th> -->
        <th>Added</th>
      <th> Campaign </th>
        <th>Item</th>
        <th>Qty</th>
        <th>Price</th>
        <th>Sub</th>
        <th>Taxes</th>
        <th>Total</th>
        <th>End date</th>
        <th>Funded</th>
        <th>Action</th>

        <th>Status (Payment due)</th>

      </tr>
      </thead>

      <tbody>

      <% @carts.each do |cart| %>

        <tr class="<%= cycle("even", "odd") %>">


          <td><%= cart.created_at.strftime("%m/%d/%Y") %> </td>
          <% product = Product.where(id: cart.product_id).first %>

            <% if not product.funded? %>
          <td> <%= link_to raw(" #{cart.product_id}"), controller: "products", action: "show", id: cart.product_id %> </td>
            <% else %>
            <td> <%= cart.product_id %> </td>

            <% end %>


          <td> <%=  product.title  %>  </td>
          <td> <%=  cart.qty  %>  </td>
          <td> <%=  number_to_currency(product.price ) %>  </td>
          <td> <%=  number_to_currency(total = product.price * cart.qty)  %>  </td>
          <td> <%=  number_to_currency(taxes = Calctax.Calctax(total, Lookup.getrate(current_user)) )  %> </td>
          <td> <%=  number_to_currency(total + taxes) =%> </td>
          <td> <%=  product.enddate  %>  </td>
          <td> <%=  product.funded  %>  </td>


          <% if not product.funded? %>
          <td> <%= link_to 'Remove', cart, method: :delete, data: { confirm: 'Are you sure?' } %>   </td>
        <% else %>



            <td>   </td>

        <% end %>
             <td>
               <a href="" data-toggle="modal" data-target="#exampleModal">Pay now</a>
               <p id="countdown"></p>
      </td>
        </tr>
      <% end %>
      </tbody>
    </table>
  </div>

</div>

<br>


  <div class="pagenav">

  <%== pagy_bootstrap_nav(@pagy) %> <br/>
  </div>
<% else %>

<div class="alert alert-warning" role="alert">You must be signed in to see the shopping cart.</div>

<% end %>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Stripe Payment Gateway</h5>

        <img src="/powered_by_stripe.png" alt="Powered by Stripe" >


        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">


  <%= form_for :stripe , url: charge_url,:html=>{:id=>"payment-form"} do |f| %>
  <div class="form-row">
    <label for="card-element">
      Credit or debit card
    </label>
    <div id="card-element">
      <!-- A Stripe Element will be inserted here. -->
    </div>

    <!-- Used to display Element errors. -->
    <div id="card-errors" role="alert"></div>
  </div>
<br>
  <button>Sumbit Payment</button>
<% end %>

      </div>
    </div>
  </div>
</div>



<script type="text/javascript">

    // Create a Stripe client.
  var stripe = Stripe('pk_test_wNeuri3HuwlL2HgmMLaCfLxb00noMQ7VJG');

  // Create an instance of Elements.
  var elements = stripe.elements();

  // Custom styling can be passed to options when creating an Element.
  // (Note that this demo uses a wider set of styles than the guide below.)
  var style = {
    base: {
      color: '#32325d',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };

  // Create an instance of the card Element.
  var card = elements.create('card', {style: style});

  // Add an instance of the card Element into the `card-element` <div>.
  card.mount('#card-element');

  // Handle real-time validation errors from the card Element.
  card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });

  // Handle form submission.
  var form = document.getElementById('payment-form');
  form.addEventListener('submit', function(event) {
    event.preventDefault();

    stripe.createToken(card).then(function(result) {
      if (result.error) {
        // Inform the user if there was an error.
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
      } else {
        // Send the token to your server.
        stripeTokenHandler(result.token);
      }
    });
  });

  // Submit the form with the token ID.
  function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);

    // Submit the form
    form.submit();
  }

</script>

<script type="text/javascript">
// Set the date we're counting down to

 var countDownDate = new Date("2019-12-26 15:37:25").getTime();
//    var countDownDate = new Date(my_enddate).getTime();


// Update the count down every 1 second
var x = setInterval(function() {

  // Get today's date and time
  var now = new Date().getTime();

  // Find the distance between now and the count down date
  var distance = countDownDate - now;

  // Time calculations for days, hours, minutes and seconds
  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

  // Output the result in an element with id="demo"
  document.getElementById("countdown").innerHTML =  days + "d " + hours + "h "
  + minutes + "m " + seconds + "s ";

  // If the count down is over, write some text
  if (distance < 0) {
    clearInterval(x);
    document.getElementById("countdown").innerHTML = "EXPIRED";
  }
}, 1000);
</script>
